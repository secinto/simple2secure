buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'org.ajoberstar:gradle-git-publish:2.1.1'
	}
}

plugins {
	id 'org.ajoberstar.git-publish' version '2.1.1'
}


apply plugin: 'org.ajoberstar.git-publish'


allprojects {
	buildscript {
		repositories {
			maven { url "https://plugins.gradle.org/m2/" }
			maven { url 'https://jitpack.io' }
			maven { url 'https://repo.spring.io/libs-snapshot' }
		}
	}
	
	apply plugin: 'java'
	apply plugin: 'eclipse-wtp'
	apply plugin: 'java-library'

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	repositories {
		mavenCentral()
		jcenter()
		flatDir { dirs 'libs' }
	}

	dependencies {
		compile 'com.google.guava:guava:21.0'
		compile 'org.slf4j:slf4j-api:1.7.25'
		compile 'ch.qos.logback:logback-classic:1.2.3'

		testCompile(
				'org.junit.jupiter:junit-jupiter-api:5.3.1'
				)
		testRuntime(
				'org.junit.jupiter:junit-jupiter-engine:5.3.1'
				)
	}

	test { useJUnitPlatform() }
}

project(':simple2secure.api') {
	dependencies {
		compile 'org.apache.commons:commons-configuration2:2.1.1'
		compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'
		compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.7'
		compile group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.1-api', version: '1.0.0.Final'
	}
}
project(':simple2secure.commons') {
	apply plugin: 'java'
	dependencies {
		implementation project(':simple2secure.api')
		compile group: 'commons-io', name: 'commons-io', version: '2.6'
		compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
		compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.7'
		compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.7'
		compile group: 'org.jeasy', name: 'easy-rules-core', version: '3.3.0'
		compile group: 'org.codehaus.groovy', name: 'groovy', version: '2.5.2'
	}
}

project(':simple2secure.service') {
	dependencies {
		compile project(':simple2secure.api')
		compile project(':simple2secure.commons')

		compile group: 'commons-daemon', name: 'commons-daemon', version: '1.1.0'
		compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
	}
}

project(':simple2secure.probe') {
	dependencies {
		dependencies {
			compile project(':simple2secure.api')
			compile project(':simple2secure.commons')

			compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
			compile group: 'org.codehaus.groovy', name: 'groovy', version: '2.5.2'
			compile group: 'org.logback-extensions', name: 'logback-ext-spring', version: '0.1.5'
			compile 'javax.activation:activation:1.1.1'
			// compile group: 'org.pcap4j', name: 'pcap4j', version: '1.7.3'
			// compile group: 'org.pcap4j', name: 'pcap4j-packetfactory-static', version: '1.7.3'

			compile group: 'org.pcap4j', name: 'pcap4j', version: '1.8.2'
			compile group: 'org.pcap4j', name: 'pcap4j-packetfactory-static', version: '1.8.2'

			compile 'org.hibernate:hibernate-core:5.0.7.Final'
			compile 'org.hibernate:hibernate-entitymanager:5.0.7.Final'
			compile group: 'com.h2database', name: 'h2', version: '1.4.195'

			testCompile 'junit:junit:4.12'
		}
	}
}

project(':simple2secure.portal') {

	dependencies {
		implementation project(':simple2secure.api')
		implementation project(':simple2secure.commons')

		compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.2'
		compile 'org.springframework.boot:spring-boot-starter-web'
		compile 'org.springframework.boot:spring-boot-starter-data-mongodb'
		compile 'org.springframework.boot:spring-boot-starter-security'
		compile 'org.springframework.boot:spring-boot-devtools'
		compile 'org.springframework.boot:spring-boot-starter-mail'
		compile group: 'ch.qos.cal10n', name: 'cal10n-api', version: '0.8.1'
		compile group: 'ch.maxant', name: 'rules', version: '2.2.1'
		compile group: 'org.apache.commons', name: 'commons-compress', version: '1.17'
		compile group: 'com.maxmind.geoip2', name: 'geoip2', version: '2.12.0'

		testCompile(
				'org.springframework.boot:spring-boot-starter-test')
	}
}


task gitTask {
	description 'Pushes the source code to the git repository'
	doLast {
		println "Pushing to the repository"
	}
}


task overwriteTask{
		doLast {
		description 'Overwrites the actual configuration according to the used profile'
		println "Renaming and copying"
				file("simple2secure.commons/src/main/resources/config.items.yml").renameTo(file("simple2secure.commons/src/main/resources/config_local.items.yml"))
				file("simple2secure.commons/src/main/resources/config_git.items.yml").renameTo(file("simple2secure.commons/src/main/resources/config.items.yml"))
				file("simple2secure.portal/src/main/resources/application.yml").renameTo(file("simple2secure.portal/src/main/resources/application_local.yml"))
				file("simple2secure.portal/src/main/resources/application_git.yml").renameTo(file("simple2secure.portal/src/main/resources/application.yml"))
		}
}


task deleteTask(type: Delete) {
		doLast {
			description 'Deletes files which must not be copied to github'
			println "Deleting files"
			delete file('simple2secure.info')
			delete file('simple2secure.portal/src/main/resources/keys')
			delete file('simple2secure.portal/src/main/resources/probe')
			delete file('simple2secure.probe/src/main/resources/keys')
		}
}


deleteTask.dependsOn overwriteTask
gitTask.dependsOn deleteTask
gitTask.shouldRunAfter deleteTask

gitPublish {
		// where to publish to (repo must exist)
		repoUri = 'git@github.com:secinto/simple2secure.git'

		// where to fetch from prior to fetching from the remote (i.e. a local repo to save time)
		referenceRepoUri = '/.git/refs/remotes/origin/master'

		// branch will be created if it doesn't exist
		branch = 'master'

		// generally, you don't need to touch this
		repoDir = file("$buildDir/somewhereelse") // defaults to $buildDir/gitPublish

		// what to publish, this is a standard CopySpec
		contents {
				from 'docker'
				//from(javadoc) {
				//    into 'api'
				//}
		}

		// what to keep in the existing branch (include=keep)
		//preserve {
		//    include '1.0.0/**'
		//    exclude '1.0.0/temp.txt'
		//}

		// message used when committing changes
		commitMessage = 'Publishing a new version' // defaults to 'Generated by gradle-git-publish'
}

